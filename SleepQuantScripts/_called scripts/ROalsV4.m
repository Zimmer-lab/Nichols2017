function [BinWinSec, BinTrcksLR, BinTrcksSR, BinTrcksO, BinTrcksLRstate, BinTrcksSRstate, BinTrcksOstate, t] = ROalsV4(Tracks,BinWin,SampleRate)%change from ROalsV3 is that behavioral state is given for the whole%duration of turns and reversals%this function does not return unbinned data for the purpose of better%memory performance%in addition it uses reshape for databinning%generates data arrays of reversal and omega and speed data from Worm Analyzer%'Analyze All Tracks' function. %Reads Tracks structure and returns data arrays with each row corresponding to one track and each column to one frame or bin%NaN if no track at given frame, RingDistance <=RingLimit or tracklenght%<=BinWin%BinWin: Number of frames for each bin%0 if no event, 1/>1 number of reversal initiation events in fram/bin,OPrefs = struct( 'MaxShortRun', 6, ....            % Maximum length of "short" runs (in seconds)                'LargeReversalThreshold', 0.35,...  % threshold between small and large reversals was 0.4                'SmallReversalThreshold', 0.05 );   % threshold between small and non reversalsglobal Prefs;   % Initiallize Preferences (same as in WormAnalyzer)Prefs = struct( 'PlotDirection', 1, ...				'PlotSpeed', 1, ...				'PlotAngSpeed', 1, ...				'SmoothWinSize', 3, ...                        % Size of Window for smoothing track data (in frames)				'StepSize', 3, ...                             % Size of step for calculating changes in X and Y coordinates (in frames): 2 for 4M pixels, 3 for 1M pixels				'TrackFileName', '', ...                       % Trackfile name                'SaveAvgSpeed', 1, ...                         % Save average speed file when avg speed analysis is done                'AvgSpeedFile', '', ...                        % average speed filename                'PlotAvgSpeed', 1, ...                         % Plot avg speed data                'SaveAvgAngSpeed', 0, ...                      % Save average angular speed file when avg speed analysis is done                'AvgAngSpeedFile', 'AngSpeedSheet.txt', ...    % average angular speed filename                'PlotAvgAngSpeed', 0, ...                      % Plot avg ang speed data                'PlotStD', 0, ...                              % Plot Standard Deviations  **Greg**                'AvgSpeedWindow', 1, ...                       % average speed analysis window size, in seconds                'AvgAngSpeedWindow', 3, ...                   % average angular speed analysis window size, in seconds                'SpeedYMax', .35, ...                            % Max speed shown in plot                'SpeedYMin', 0, ...                            % Min speed shown in plot                'SpeedXMax', 75, ...                           % Max time shown in plot (sec *10)                'SpeedXMin', 0, ...                            % Min time shown in plot (sec *10)                 'PirThresh', 20, ...                           % (previously 110) Minimum Angular velocity for identifying a pirouette                'TransThresh', 20, ...                         % For Makoto's update 09-18-05 - threshold for detecting Omegas                'RevTransThresh', 110, ...                     % For Makoto's update 09-18-05 - threshold for detecting Reversals                'RoundThresh', 1.47, ...                       % Cutoff for omega bends                'EccentricityThresh', 0.75, ...                 % Cutoff for omega bends                'MaxRevLen', 10, ...                           % For Makoto's update 09-18-05 - Maximum Reversal Length                'MaxShortRun', 6, ...                          % (Maximum length of "short" runs (in seconds))                'MaxLongRev', 6, ...                          % maximum length of long reversal (in seconds)                    'RingLimit', 40, ...                           % 40 how close the animal has to be to be affected by the ring, 40 for high reversal animals, 45-60 for others                'RingEffectDuration', 20, ...                  % refractory period (in frames) after reversal induced by hitting ring                    'MaxOmegaYValue', 5, ...                       % Max value for Omega bends                'FFSpeed', 6, ...                              % Speed of FF (and RW) track playback                'PixelSize', 1/17.64);                        % Image calibration - pixels/mm mesured in both vertical and horizontal directions) -                                                                % Microscope in Lowest Magnification setting                                                                % (Leica Mic. cal - 68.5, Navatar Lens Min Zoom cal - 36.5,                                                                % Navatar                                                               % Lens Exps (N2)401-404 - 49.2)% Process Pirouettes Data% -----------------------Len = max([Tracks.Frames]);%BinWin = 15;  %number of frames/bin (i.e. 3 frames sec, 180 = 1 min bins)% BinWin = 90BinNum = floor(Len/BinWin);BinWinSec=BinWin/SampleRate;     t=(BinWinSec/2:BinWinSec:BinWinSec*BinNum-(BinWinSec/2)); % time(seconds)bintrcknum=zeros(1,BinNum);% Tracks.Reversals;% Tracks.OmegaTrans;if BinWin > 1        disp('Warning: behavioral state is only set when turn binning = 1');    endBinTrcksLR=(NaN(length(Tracks),BinNum,'single')); %create data arrays for binned data; initiation eventsBinTrcksSR=(NaN(length(Tracks),BinNum,'single'));BinTrcksO=(NaN(length(Tracks),BinNum,'single'));BinTrcksLRstate=(NaN(length(Tracks),BinNum,'single')); %create data arrays for binned data; stateBinTrcksSRstate=(NaN(length(Tracks),BinNum,'single'));BinTrcksOstate=(NaN(length(Tracks),BinNum,'single'));for i = 1:length(Tracks)    if Tracks(i).Analyzed && Tracks(i).NumFrames >= BinWin                    trcksLR=(NaN(1,Len,'single')); %create data arrays for raw data; initiation events        trcksSR=(NaN(1,Len,'single'));        trcksO=(NaN(1,Len,'single'));                trcksLRstate=(NaN(1,Len,'single')); %create data arrays for raw data; state        trcksSRstate=(NaN(1,Len,'single'));        trcksOstate=(NaN(1,Len,'single'));                        Reversals = Tracks(i).Reversals;        Omegas = Tracks(i).OmegaTrans;                        trcksLR(Tracks(i).Frames)=0; %when track set to 0        trcksSR(Tracks(i).Frames)=0;        trcksO(Tracks(i).Frames)=0;                trcksLRstate(Tracks(i).Frames)=0; %when track set to 0        trcksSRstate(Tracks(i).Frames)=0;        trcksOstate(Tracks(i).Frames)=0;                                 RingD = find(Tracks(i).RingDistance <= Prefs.RingLimit & Tracks(i).RingDistance >0);                        RingD = [RingD RingD-1 RingD-2 RingD-3];   %in wormtracker RingDistance is recorded every 4th frame                        RingD = RingD(RingD > 0);                            if ~isempty(Omegas)                               [NumOmegas, ~] = size(Omegas);                                                    trcksO(Tracks(i).Frames(Omegas(:,1)))=1; %when O initiation set to 1                                for omgs = 1:NumOmegas                                                      	trcksOstate(Tracks(i).Frames(Omegas(omgs,1)):Tracks(i).Frames(Omegas(omgs,2)))=1; %during O set to 1                                                end                            trcksO(Tracks(i).Frames(RingD))=NaN;            trcksOstate(Tracks(i).Frames(RingD))=NaN;            end                        if ~isempty(Reversals)            % Collect all Reversal Initiation Events and set behavioral            % state                        %(Tracks(i).Reversals(:,2) - Tracks(i).Reversals(:,1) <= Prefs.MaxRevLen)                        LongRevI = find(Tracks(i).Reversals(:,3) > OPrefs.LargeReversalThreshold & (((Tracks(i).Reversals(:,2) - Tracks(i).Reversals(:,1)) / SampleRate) <= Prefs.MaxRevLen));            ShortRevI = find(Tracks(i).Reversals(:,3) <= OPrefs.LargeReversalThreshold...                & Tracks(i).Reversals(:,3) > OPrefs.SmallReversalThreshold);                                                trcksLR(Tracks(i).Frames(Reversals(LongRevI,1)))=1; %when LR initiation set to 1                        for lri = 1:size(LongRevI)                       trcksLRstate(Tracks(i).Frames(Reversals(LongRevI(lri),1)):Tracks(i).Frames(Reversals(LongRevI(lri),2)))=1; %during LR state set to 1                       end                                   trcksSR(Tracks(i).Frames(Reversals(ShortRevI,1)))=1; %when SR initiation set to 1                        for sri = 1:size(ShortRevI)                                      trcksSRstate(Tracks(i).Frames(Reversals(ShortRevI(sri),1)):Tracks(i).Frames(Reversals(ShortRevI(sri),2)))=1; %during SR  set to 1            end                                              %remove Reversals and speed data while animals are close to copper ring                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%CONTINUE HERE            %             RingD = find(Tracks(i).RingEffect == 1);%             %             RingD = RingD(RingD <= Tracks(i).NumFrames); % apparently%             Ringeffect can have more entries than frames. I could not%             figure out yet where in the code this happens.                                                           trcksLR(Tracks(i).Frames(RingD))=NaN; % set to NaN if close to Ring            trcksSR(Tracks(i).Frames(RingD))=NaN;                                                                       trcksLRstate(Tracks(i).Frames(RingD))=NaN; % set to NaN if close to Ring            trcksSRstate(Tracks(i).Frames(RingD))=NaN;                    end%         for bns=1:BinNum %bin data%             %             if (Tracks(i).Frames(1) <= (bns*BinWin-BinWin+1)) && (Tracks(i).Frames(end) >= (bns*BinWin)) %bin data only from tracks that are complete over entire bin%                           %if ~(max(Tracks(i).Frames) < (bns*BinWin-BinWin+1) || min(Tracks(i).Frames) > (bns*BinWin)) %only if track is active in frame                        %BinTrcksSpd(i,:)=mean(reshape(trcksSpd(1:BinNum*BinWin),BinWin,BinNum));                                   %bin data                      if BinWin == 1                           BinTrcksLR(i,:)=trcksLR;            BinTrcksSR(i,:)=trcksSR;            BinTrcksO(i,:)=trcksO;                                    BinTrcksLRstate(i,:) = trcksLRstate;            BinTrcksSRstate(i,:) = trcksSRstate;            BinTrcksOstate(i,:) = trcksOstate;%             %             BinTrcksLRstate(i,BinTrcksLR(i,:) ==0 ) = 0;%             BinTrcksSRstate(i,BinTrcksSR(i,: )==0 ) = 0;%             BinTrcksOstate(i,BinTrcksO(i,: )==0 ) = 0;                                           else                        BinTrcksLR(i,:)=sum(reshape(trcksLR(1:BinNum*BinWin),BinWin,BinNum));            BinTrcksSR(i,:)=sum(reshape(trcksSR(1:BinNum*BinWin),BinWin,BinNum));            BinTrcksO(i,:)=sum(reshape(trcksO(1:BinNum*BinWin),BinWin,BinNum));                                    %             BinTrcksLRstate(i,BinTrcksLR(i,:) >=1 ) = 1;%             BinTrcksSRstate(i,BinTrcksSR(i,:)>=1 ) = 1;%             BinTrcksOstate(i,BinTrcksO(i,:)>=1 ) = 1;%             %             BinTrcksLRstate(i,BinTrcksLR(i,:) ==0 ) = 0;%             BinTrcksSRstate(i,BinTrcksSR(i,: )==0 ) = 0;%             BinTrcksOstate(i,BinTrcksO(i,: )==0 ) = 0;                       end%             end;%         %         end;%         endend% bintrcknum = sum(isfinite(BinTrcksSpd));    %     trcknum=zeros(1,Len);% % % % for idx=1:Len %number of tracks in each frame that contribute to raw datasets (excluding those with RingD < RingLimit)%     %     trcknum(idx)=length(trcksLR(isfinite(trcksLR(:,idx))));%    %     % end;